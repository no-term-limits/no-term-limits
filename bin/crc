#!/usr/bin/env bash

function error_handler() {
  >&2 echo "Exited with BAD EXIT CODE '${2}' in ${0} script at line: ${1}."
  exit "$2"
}
trap 'error_handler ${LINENO} $?' ERR
set -o errtrace -o errexit -o nounset -o pipefail

# HELP: creates a command based on user input. Run "crc -h" for details

if grep -qE '^\-\<h\>$' <<<"$@"; then
  echo "usage: crc [command_name] [command_body](optional) [command_help](optional)"
  exit 0
fi

new_command="${1:-}"
command_contents="${2:-}"
command_help="${3:-}"

if [[ -z "${COMMAND_DESTINATION_REPO:-}" ]]; then
  new_command_location="$(dirname "$0")/${new_command}"
else
  new_command_location="${COMMAND_DESTINATION_REPO}/${new_command}"
fi
cd "$(dirname "${new_command_location}")/../"

function run() {
  if [[ "${FORCE_CREATION:-}" == "true" ]] || grep -q 'COMMAND_NOT_FOUND' <<<"$(cac "$new_command" 2>&1 || echo '')"; then
    bash_script_header >"$new_command_location"
    echo -e "# HELP: ${command_help}\n\n${command_contents}" >>"$new_command_location"
    chmod +x "$new_command_location"
    if [[ "${NON_INTERACTIVE:-}" != "true" ]]; then
      exec $(vim_command) "+normal G^" "$new_command_location"
    fi
  else
    echo "ERROR: command already exists"
  fi
}

run
