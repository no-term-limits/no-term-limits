#!/usr/bin/env bash

function error_handler() {
  >&2 echo "Exited with BAD EXIT CODE '${2}' in ${0} script at line: ${1}."
  exit "$2"
}
trap 'error_handler ${LINENO} $?' ERR
set -o errtrace -o errexit -o nounset -o pipefail

# function to update single file
function update_file() {
  local file="$1"
  if [[ "$file" == "./Support/FAQ.md" ]]; then
    echo "skipping $file since it is in a question and answer format that LLMs cannot handle. They assume you are doing few-shot learning and do not return the full doc."
    return
  fi
  if [[ "$file" == "./archetypes/default.md" ]]; then
    echo "skipping $file since it is a file that does not have a lot of text in it and it has unconventional spacing."
    return
  fi
  markdown_to_ventilated_prose.py "$file" "$file"
  # gpt-proofread.py "$file"
  # markdown_to_ventilated_prose.py "$file" "$file"
}

max_files="${1:-}"

# provide option to exit after editing n files
count=0
while IFS= read -r -d '' file; do
  update_file "$file"
  count=$((count + 1))
  if [[ -n "$max_files" ]]; then
    if [[ "$count" -ge "$max_files" ]]; then
      break
    fi
  fi
done < <(find . -type f -name "*.md" -print0)

# while IFS= read -r -d '' file; do
#   update_file "$file"
# done < <(find . -type f -name "*.md" -print0)

# update_file "Support/Welcome_Messages.md"

# these are long, problematic files, good for testing.
# not sure why documentation.md likes to get lots of extra newlines added.
# echo 'fyi, running test files, not all files'
# for file in Getting_Started/quick_start.md Support/FAQ.md documentation/documentation.md; do
#   update_file "$file"
# done
