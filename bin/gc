#!/usr/bin/env bash

function error_handler() {
  >&2 echo "Exited with BAD EXIT CODE '${2}' in ${0} script at line: ${1}."
  exit "$2"
}
trap 'error_handler ${LINENO} $?' ERR
set -o errtrace -o errexit -o nounset -o pipefail

# HELP: git: popular: runs git add, git commit, and gpush. see also gcu and gcd. If paired users are connected through wemux it will add them to the commit message as collaborators as well. Add get_pair_users_for_git_commit_message command that prints out space separated list of users to customize the paired user list.

commit_message="$*"

if [[ -z "${NO_TERM_LIMITS_RUN_GIT_ADD:-}" ]]; then
  NO_TERM_LIMITS_RUN_GIT_ADD=all
fi

if [[ -z "$commit_message" ]]; then
  echo "ERROR: please supply commit message as first argument"
  exit 1
fi

if command -v gc_pre_commit_check >/dev/null; then
  gc_pre_commit_check
fi

currently_connected_paired_users=""
if command -v get_pair_users_for_git_commit_message >/dev/null; then
  currently_connected_paired_users=$(get_pair_users_for_git_commit_message)
else
  currently_connected_paired_users=$(currently_connected_paired_users | (hot_sed -E "s/\<$(whoami)\>//" | perl -p -e 's/ *$//' || echo ''))
fi

if [[ -n "$currently_connected_paired_users" ]]; then
  commit_message="$commit_message w/ $currently_connected_paired_users"
fi

sleep_period=1

echo "about to commit with commit message: $commit_message"
echo "ctrl+c in next ${sleep_period} seconds to abort git commit"
sleep "$sleep_period"

if [[ "$NO_TERM_LIMITS_RUN_GIT_ADD" == "all" ]]; then
  git add .
elif [[ "$NO_TERM_LIMITS_RUN_GIT_ADD" == "updated" ]]; then
  git add -u
elif [[ "$NO_TERM_LIMITS_RUN_GIT_ADD" == "patch" ]]; then
  # always add all untracked files, but let the -p deal with updated files
  git ls-files --others --exclude-standard | xargs git add
  git add -p
fi

git commit -m "$commit_message"
echo "committed. ctrl+c in next ${sleep_period} seconds to abort gpush"
sleep "$sleep_period"

gpush
