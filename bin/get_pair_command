#!/usr/bin/env bash

function error_handler() {
  >&2 echo "Exited with BAD EXIT CODE '${2}' in ${0} script at line: ${1}."
  exit "$2"
}
trap 'error_handler ${LINENO} $?' ERR
set -o errtrace -o errexit -o nounset -o pipefail

# HELP: assemble a pairing command and copy to clipboard. Attempts to use the hostname as the ssh target and will fall back to ip if it can't be resoved. Set NO_TERM_LIMITS_DEFAULT_HOSTNAME_SUFFIX if hostname can be used but a hostname suffix is required.

interfaces="${@}"
if [[ -z "$interfaces" ]]; then
  interfaces="tailscale0 utun4"
fi

domain="$(hostname | tr '[:upper:]' '[:lower:]')"
if [[ -n "${NO_TERM_LIMITS_DEFAULT_HOSTNAME_SUFFIX:-}" ]]; then
  domain="${domain}.${NO_TERM_LIMITS_DEFAULT_HOSTNAME_SUFFIX}"
fi
ssh_target="$domain"

for interface in $interfaces; do
  config_for_interface=$(ifconfig "$interface" 2>/dev/null || echo '')
  if [[ -n "$config_for_interface" ]]; then
    break
  fi
done

# try to find vpn ip
ip_from_ifconfig=$( (grep -E '\<inet\>' <<<"$config_for_interface" | head -n 1 || echo '') | awk '{print $2}')

# if that fails, find public ip from ifconfig.me
if [[ -z "$ip_from_ifconfig" ]]; then
  ip_from_ifconfig="$(curl --silent --fail https://ifconfig.me)"
fi

ip_from_domain=$(dig +short "$domain")
if [[ "$ip_from_ifconfig" != "$ip_from_domain" ]]; then
  ssh_target="$ip_from_ifconfig"
fi

if [[ -f /var/tmp/no_term_limits_wemux_ssh_users ]]; then
  commands_to_copy=""

  while read -r pair_user; do
    if [[ "$pair_user" != "$(whoami)" ]]; then
      commands_to_copy="${commands_to_copy}ssh -o \"StrictHostKeyChecking=no\" $pair_user@${ssh_target}:::"
    fi
  done </var/tmp/no_term_limits_wemux_ssh_users
  commands_to_copy=$(perl -p -e 's/:*$//' <<<"$commands_to_copy" | sed -E 's/:::/\n/g')
  echo -e "$commands_to_copy"
  cbcp "$commands_to_copy"
fi
