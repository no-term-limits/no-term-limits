#!/usr/bin/env bash

function error_handler() {
  echo >&2 "Exited with BAD EXIT CODE '${2}' in ${0} script at line: ${1}."
  exit "$2"
}
trap 'error_handler ${LINENO} $?' ERR
set -o errtrace -o errexit -o nounset -o pipefail

# HELP: wrapper around the python poetry command

command="${1:-}"
if [[ -z "${1:-}" ]]; then
  echo >&2 "usage: $(basename "$0") [command]"
  exit 1
fi
shift

if [[ "$command" == "test" ]] || [[ "$command" == "t" ]] || grep -Eq "^test" <<<"$command"; then
  args="$@"
  test_name=''
  test_file=''
  if grep -Eq "^test_" <<<"$command"; then
    test_name="$command"
  elif grep -Eq "^test.*py$" <<<"$command" && [[ -f "${command:-}" ]]; then
    test_file="$command"
  else
    if [[ -z "${2:-}" ]]; then
      if grep -qE '^test_' <<<"${1:-}"; then
        test_name="$1"
        shift
      elif [[ -f "${1:-}" ]]; then
        test_file="$1"
        shift
      fi
    fi
  fi
  if [[ -n "$test_name" ]]; then
    # there's no way to to have a test_file and test_name yet, so look up test_file based on test_name
    test_dir="tests"
    if [[ -d "test" ]]; then
      test_dir="test"
    fi
    test_file=$(grep -lR --exclude=.* --exclude-dir=.* --exclude=_* --exclude-dir=_* "\<$test_name\>" "${test_dir}/" || echo '')
    if [[ -z "$test_file" ]]; then
      echo >&2 "ERROR: test_name specified, but it could not be found in any file"
      exit 1
    fi
    if [[ "$(wc -l <<<"$test_file")" -gt 1 ]]; then
      echo -e "ERROR: Found multiple files with given test:\n${test_file}" >&2
      exit 1
    fi
    class_name_arg=""
    expected_class_name=$(basename "$test_file" .py | perl -pe 's/(^|_)(\w)/\U$2/g')
    if grep -q "^class \<${expected_class_name}\>" "$test_file"; then
      class_name_arg="::${expected_class_name}"
    fi
    args="-s ${test_file}${class_name_arg}::${test_name} ${@}"
  elif [[ -n "$test_file" ]]; then
    args="$test_file $args"
  fi
  if [[ -f "requirements-dev.txt" || -f "requirements.txt" ]] && [[ ! -f "pyproject.toml" ]]; then
    pytest $args
  else
    if [[ -f pyproject.toml ]] && ! grep -Eq tool.poetry pyproject.toml; then
      uv run pytest $args
    else
      pytest $args
    fi
  fi
elif [[ "$command" == "update" ]]; then
  if [[ -z "${1:-}" ]]; then
    echo >&2 "usage: $(basename "$0") [update] [library]"
    exit 1
  fi

  poetry update "$@"
# we imagine that the npm install command has code something like this since we
# know that it handles npm i, npm ins, npm install, and even a few common
# mispellings. :D
elif grep -Eq '^i[nstall]*' <<<"$command"; then
  poetry install "$@"
elif grep -Eq 'destroy' <<<"$command"; then
  remove_python_poetry_env_dir_from_disk
elif [[ "$command" == "mypy" ]]; then
  run_mypy_with_poetry
elif grep -Eq '^pre[commit]*' <<<"$command"; then
  run_precommit_with_poetry
elif [[ "$command" == "typeguard" ]]; then
  # we implement this in conftest.py like:
  # if os.environ.get("RUN_TYPEGUARD") == "true":
  #   from typeguard.importhook import install_import_hook
  #   install_import_hook(packages="my_hot_package")
  RUN_TYPEGUARD=true poet test "$@"
else
  poetry "$command" "$@"
fi
